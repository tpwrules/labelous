# export all the finished annotations to desktop LabelMe compatible JSON files
# (along with the relevant images)

from django.db import transaction
from django.core.management.base import BaseCommand, CommandError

import pathlib
import json

from label_app.models import Annotation
from label_app.views import calculate_object_color

# return the color of the name as an (r, g, b) tuple
def get_color(name):
    c = calculate_object_color(name)
    return (int(c[1:3], 16), int(c[3:5], 16), int(c[5:7], 16))

class Command(BaseCommand):
    help = "Export finished annotations as JSON."

    def add_arguments(self, parser):
        parser.add_argument("dir",
            help="Directory to place exported JSON files and images.")

    def handle(self, *args, **options):
        out_dir = pathlib.Path(options["dir"]).resolve(strict=True)
        if not out_dir.is_dir():
            raise Exception("output directory must be a directory")

        for anno in Annotation.objects.filter(finished=True).only("pk"):
            with transaction.atomic():
                # reselect the annotation for update so nobody else can touch it
                # until we are done with it (and vice versa)
                anno = Annotation.objects.select_for_update().get(pk=anno.pk)
                if anno.finished is not True: continue
                image = anno.image

                # export this annotation's image. it has to be named the same as
                # the annotation file for desktop labelme to pick it up
                image_name = ("anno_{}.jpg".format(anno.pk))
                src = image.image_path
                dest = out_dir/image_name
                dest.write_bytes(src.read_bytes())

                # from some files generated by the tool
                out_json = {
                    "version": "3.6.16",
                    "flags": {},
                    "lineColor": [0, 255, 0, 128],
                    "fillColor": [255, 0, 0, 128],
                    "imagePath": image_name,
                    "imageData": None,
                    "imageWidth": image.image_size[0],
                    "imageHeight": image.image_size[1],
                }

                # export all the labels for this annotation
                shapes = []
                for pi, poly in enumerate(anno.polygons.filter(deleted=False)):
                    points = poly.points
                    out_points = []
                    for pti in range(0, len(points), 2):
                        out_points.append([points[pti], points[pti+1]])

                    color = get_color(poly.label_as_str)
                    shapes.append({
                        "label": poly.label_as_str,
                        "id": pi,
                        "line_color": [*color, 255],
                        "fill_color": [*color, 128],
                        "points": out_points,
                        "shape_type": "polygon",
                    })

                out_json["shapes"] = shapes

                f = open(out_dir/("anno_{}.json".format(anno.pk)), "w")
                json.dump(out_json, f)
                f.close()
